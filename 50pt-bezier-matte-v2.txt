// ########################################################################## //
// ########################## Bezier Garbage Matte ########################## //
// ########################################################################## //
// ------------------------ Written by Tom Henderson ------------------------ //
// 2003-03-19 : First Public Release                                          //
// 2012-06-05 : Released under 

filter "50 Point Bezier Matte v2";
group "Tom's Filters";


// ########################################################################## //
// ############################# Define Inputs ############################## //
// ########################################################################## //

input label1,               "Canvas Settings",      label, "Canvas Settings";
input boolShowHandles,      "Show Bezier Handles",  checkbox, 1;
input boolShowTarget,       "Show Bezier Target",   checkbox, 1;
input boolShowPoints,       "Show Points",          checkbox, 1;
input boolShowOutline,      "Show Outline",         checkbox, 1;
input boolShowMask,         "Show Mask",            checkbox, 0;
input boolShowLabels,       "Show Labels",          checkbox, 0;
input colorLabels,          "Label Color",          color, 255, 255, 255, 255;

input label2,               "Alpha Settings",       label, "Alpha Settings";
input boolInvertAlpha,      "Invert",               checkbox, 0;
input floatMatteMode,       "Method",               popup, 1, "Ignore Previous", "Combine With Previous";

input label3,               "Curve Settings",       label, "Curve Settings";
input floatCurveRes,	    "Curve Resolution",		slider, 10, 2, 100;

// ------------------------------ Points 1 - 5 ------------------------------ //

input labelPoint1,          "",                     label, "";
input point1BezierIn,       "Bezier Control In",    point, 0, 0;
input point1,               "Point 1",              point, 0, 0;
input point1BezierOut,      "Bezier Control Out",   point, 0, 0;
input boolPoint1Smooth,     "Smooth",               checkbox, 0;

input labelPoint2,          "",                     label, "";
input point2BezierIn,       "Bezier Control In",    point, 0, 0;
input point2,               "Point 2",              point, 0, 0;
input point2BezierOut,      "Bezier Control Out",   point, 0, 0;
input boolPoint2Smooth,     "Smooth",               checkbox, 0;

input labelPoint3,          "",                     label, "";
input boolPoint3Active,     "Activate Point 3",     checkbox, 0;
input point3BezierIn,       "Bezier Control In",    point, 0, 0;
input point3,               "Point 3",              point, 0, 0;
input point3BezierOut,      "Bezier Control Out",   point, 0, 0;
input boolPoint3Smooth,     "Smooth",               checkbox, 0;

input labelPoint4,          "",                     label, "";
input boolPoint4Active,     "Activate Point 4",     checkbox, 0;
input point4BezierIn,       "Bezier Control In",    point, 0, 0;
input point4,               "Point 4",              point, 0, 0;
input point4BezierOut,      "Bezier Control Out",   point, 0, 0;
input boolPoint4Smooth,     "Smooth",               checkbox, 0;

input labelPoint5,          "",                     label, "";
input boolPoint5Active,     "Activate Point 5",     checkbox, 0;
input point5BezierIn,       "Bezier Control In",    point, 0, 0;
input point5,               "Point 5",              point, 0, 0;
input point5BezierOut,      "Bezier Control Out",   point, 0, 0;
input boolPoint5Smooth,     "Smooth",               checkbox, 0;

// ----------------------------- Points 6 - 10 ------------------------------ //

input labelPoint6,          "",                     label, "";
input boolPoint6Active,     "Activate Point 6",     checkbox, 0;
input point6BezierIn,       "Bezier Control In",    point, 0, 0;
input point6,               "Point 6",              point, 0, 0;
input point6BezierOut,      "Bezier Control Out",   point, 0, 0;
input boolPoint6Smooth,     "Smooth",               checkbox, 0;

input labelPoint7,          "",                     label, "";
input boolPoint7Active,     "Activate Point 7",     checkbox, 0;
input point7BezierIn,       "Bezier Control In",    point, 0, 0;
input point7,               "Point 7",              point, 0, 0;
input point7BezierOut,      "Bezier Control Out",   point, 0, 0;
input boolPoint7Smooth,     "Smooth",               checkbox, 0;

input labelPoint8,          "",                     label, "";
input boolPoint8Active,     "Activate Point 8",     checkbox, 0;
input point8BezierIn,       "Bezier Control In",    point, 0, 0;
input point8,               "Point 8",              point, 0, 0;
input point8BezierOut,      "Bezier Control Out",   point, 0, 0;
input boolPoint8Smooth,     "Smooth",               checkbox, 0;

input labelPoint9,          "",                     label, "";
input boolPoint9Active,     "Activate Point 9",     checkbox, 0;
input point9BezierIn,       "Bezier Control In",    point, 0, 0;
input point9,               "Point 9",              point, 0, 0;
input point9BezierOut,      "Bezier Control Out",   point, 0, 0;
input boolPoint9Smooth,     "Smooth",               checkbox, 0;

input labelPoint10,         "",                     label, "";
input boolPoint10Active,    "Activate Point 10",    checkbox, 0;
input point10BezierIn,      "Bezier Control In",    point, 0, 0;
input point10,              "Point 10",             point, 0, 0;
input point10BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint10Smooth,    "Smooth",               checkbox, 0;

// ---------------------------- Points 11 - 15 ------------------------------ //

input labelPoint11,         "",                     label, "";
input boolPoint11Active,    "Activate Point 11",    checkbox, 0;
input point11BezierIn,      "Bezier Control In",    point, 0, 0;
input point11,              "Point 11",             point, 0, 0;
input point11BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint11Smooth,    "Smooth",               checkbox, 0;

input labelPoint12,         "",                     label, "";
input boolPoint12Active,    "Activate Point 12",    checkbox, 0;
input point12BezierIn,      "Bezier Control In",    point, 0, 0;
input point12,              "Point 12",             point, 0, 0;
input point12BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint12Smooth,    "Smooth",               checkbox, 0;

input labelPoint13,         "",                     label, "";
input boolPoint13Active,    "Activate Point 13",    checkbox, 0;
input point13BezierIn,      "Bezier Control In",    point, 0, 0;
input point13,              "Point 13",             point, 0, 0;
input point13BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint13Smooth,    "Smooth",               checkbox, 0;

input labelPoint14,         "",                     label, "";
input boolPoint14Active,    "Activate Point 14",    checkbox, 0;
input point14BezierIn,      "Bezier Control In",    point, 0, 0;
input point14,              "Point 14",             point, 0, 0;
input point14BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint14Smooth,    "Smooth",               checkbox, 0;

input labelPoint15,         "",                     label, "";
input boolPoint15Active,    "Activate Point 15",    checkbox, 0;
input point15BezierIn,      "Bezier Control In",    point, 0, 0;
input point15,              "Point 15",             point, 0, 0;
input point15BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint15Smooth,    "Smooth",               checkbox, 0;

// ---------------------------- Points 16 - 20 ------------------------------ //

input labelPoint16,         "",                     label, "";
input boolPoint16Active,    "Activate Point 16",    checkbox, 0;
input point16BezierIn,      "Bezier Control In",    point, 0, 0;
input point16,              "Point 16",             point, 0, 0;
input point16BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint16Smooth,    "Smooth",               checkbox, 0;

input labelPoint17,         "",                     label, "";
input boolPoint17Active,    "Activate Point 17",    checkbox, 0;
input point17BezierIn,      "Bezier Control In",    point, 0, 0;
input point17,              "Point 17",             point, 0, 0;
input point17BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint17Smooth,    "Smooth",               checkbox, 0;

input labelPoint18,         "",                     label, "";
input boolPoint18Active,    "Activate Point 18",    checkbox, 0;
input point18BezierIn,      "Bezier Control In",    point, 0, 0;
input point18,              "Point 18",             point, 0, 0;
input point18BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint18Smooth,    "Smooth",               checkbox, 0;

input labelPoint19,         "",                     label, "";
input boolPoint19Active,    "Activate Point 19",    checkbox, 0;
input point19BezierIn,      "Bezier Control In",    point, 0, 0;
input point19,              "Point 19",             point, 0, 0;
input point19BezierOut,     "Bezier Control Out",	point, 0, 0;
input boolPoint19Smooth,    "Smooth",               checkbox, 0;

input labelPoint20,         "",                     label, "";
input boolPoint20Active,    "Activate Point 20",    checkbox, 0;
input point20BezierIn,      "Bezier Control In",    point, 0, 0;
input point20,              "Point 20",             point, 0, 0;
input point20BezierOut,     "Bezier Control Out",	point, 0, 0;
input boolPoint20Smooth,    "Smooth",               checkbox, 0;

// ---------------------------- Points 21 - 25 ------------------------------ //

input labelPoint21,         "",                     label, "";
input boolPoint21Active,    "Activate Point 21",    checkbox, 0;
input point21BezierIn,      "Bezier Control In",    point, 0, 0;
input point21,              "Point 21",             point, 0, 0;
input point21BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint21Smooth,    "Smooth",               checkbox, 0;

input labelPoint22,         "",                     label, "";
input boolPoint22Active,    "Activate Point 22",    checkbox, 0;
input point22BezierIn,      "Bezier Control In",    point, 0, 0;
input point22,              "Point 22",             point, 0, 0;
input point22BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint22Smooth,    "Smooth",               checkbox, 0;

input labelPoint23,         "",                     label, "";
input boolPoint23Active,    "Activate Point 23",    checkbox, 0;
input point23BezierIn,      "Bezier Control In",    point, 0, 0;
input point23,              "Point 23",             point, 0, 0;
input point23BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint23Smooth,    "Smooth",               checkbox, 0;

input labelPoint24,         "",                     label, "";
input boolPoint24Active,    "Activate Point 24",    checkbox, 0;
input point24BezierIn,      "Bezier Control In",    point, 0, 0;
input point24,              "Point 24",             point, 0, 0;
input point24BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint24Smooth,    "Smooth",               checkbox, 0;

input labelPoint25,         "",                     label, "";
input boolPoint25Active,    "Activate Point 25",    checkbox, 0;
input point25BezierIn,      "Bezier Control In",    point, 0, 0;
input point25,              "Point 25",             point, 0, 0;
input point25BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint25Smooth,    "Smooth",               checkbox, 0;

// ---------------------------- Points 26 - 30 ------------------------------ //

input labelPoint26,         "",                     label, "";
input boolPoint26Active,    "Activate Point 26",    checkbox, 0;
input point26BezierIn,      "Bezier Control In",    point, 0, 0;
input point26,              "Point 26",             point, 0, 0;
input point26BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint26Smooth,    "Smooth",               checkbox, 0;

input labelPoint27,         "",                     label, "";
input boolPoint27Active,    "Activate Point 27",    checkbox, 0;
input point27BezierIn,      "Bezier Control In",    point, 0, 0;
input point27,              "Point 27",             point, 0, 0;
input point27BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint27Smooth,    "Smooth",               checkbox, 0;

input labelPoint28,         "",                     label, "";
input boolPoint28Active,    "Activate Point 28",    checkbox, 0;
input point28BezierIn,      "Bezier Control In",    point, 0, 0;
input point28,              "Point 28",             point, 0, 0;
input point28BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint28Smooth,    "Smooth",               checkbox, 0;

input labelPoint29,         "",                     label, "";
input boolPoint29Active,    "Activate Point 29",    checkbox, 0;
input point29BezierIn,      "Bezier Control In",    point, 0, 0;
input point29,              "Point 29",             point, 0, 0;
input point29BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint29Smooth,    "Smooth",               checkbox, 0;

input labelPoint30,         "",                     label, "";
input boolPoint30Active,    "Activate Point 30",    checkbox, 0;
input point30BezierIn,      "Bezier Control In",    point, 0, 0;
input point30,              "Point 30",             point, 0, 0;
input point30BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint30Smooth,    "Smooth",               checkbox, 0;

// ---------------------------- Points 31 - 35 ------------------------------ //

input labelPoint31,         "",                     label, "";
input boolPoint31Active,    "Activate Point 31",    checkbox, 0;
input point31BezierIn,      "Bezier Control In",    point, 0, 0;
input point31,              "Point 31",             point, 0, 0;
input point31BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint31Smooth,    "Smooth",               checkbox, 0;

input labelPoint32,         "",                     label, "";
input boolPoint32Active,    "Activate Point 32",    checkbox, 0;
input point32BezierIn,      "Bezier Control In",    point, 0, 0;
input point32,              "Point 32",             point, 0, 0;
input point32BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint32Smooth,    "Smooth",               checkbox, 0;

input labelPoint33,         "",                     label, "";
input boolPoint33Active,    "Activate Point 33",    checkbox, 0;
input point33BezierIn,      "Bezier Control In",    point, 0, 0;
input point33,              "Point 33",             point, 0, 0;
input point33BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint33Smooth,    "Smooth",               checkbox, 0;

input labelPoint34,         "",                     label, "";
input boolPoint34Active,    "Activate Point 34",    checkbox, 0;
input point34BezierIn,      "Bezier Control In",    point, 0, 0;
input point34,              "Point 34",             point, 0, 0;
input point34BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint34Smooth,    "Smooth",               checkbox, 0;

input labelPoint35,         "",                     label, "";
input boolPoint35Active,    "Activate Point 35",    checkbox, 0;
input point35BezierIn,      "Bezier Control In",    point, 0, 0;
input point35,              "Point 35",             point, 0, 0;
input point35BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint35Smooth,    "Smooth",               checkbox, 0;

// ---------------------------- Points 36 - 40 ------------------------------ //

input labelPoint36,         "",                     label, "";
input boolPoint36Active,    "Activate Point 36",    checkbox, 0;
input point36BezierIn,      "Bezier Control In",    point, 0, 0;
input point36,              "Point 36",             point, 0, 0;
input point36BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint36Smooth,    "Smooth",               checkbox, 0;

input labelPoint37,         "",                     label, "";
input boolPoint37Active,    "Activate Point 37",    checkbox, 0;
input point37BezierIn,      "Bezier Control In",    point, 0, 0;
input point37,              "Point 37",             point, 0, 0;
input point37BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint37Smooth,    "Smooth",               checkbox, 0;

input labelPoint38,         "",                     label, "";
input boolPoint38Active,    "Activate Point 38",    checkbox, 0;
input point38BezierIn,      "Bezier Control In",    point, 0, 0;
input point38,              "Point 38",             point, 0, 0;
input point38BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint38Smooth,    "Smooth",               checkbox, 0;

input labelPoint39,         "",                     label, "";
input boolPoint39Active,    "Activate Point 39",    checkbox, 0;
input point39BezierIn,      "Bezier Control In",    point, 0, 0;
input point39,              "Point 39",             point, 0, 0;
input point39BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint39Smooth,    "Smooth",               checkbox, 0;

input labelPoint40,         "",                     label, "";
input boolPoint40Active,    "Activate Point 40",    checkbox, 0;
input point40BezierIn,      "Bezier Control In",    point, 0, 0;
input point40,              "Point 40",             point, 0, 0;
input point40BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint40Smooth,    "Smooth",               checkbox, 0;

// ---------------------------- Points 41 - 45 ------------------------------ //

input labelPoint41,         "",                     label, "";
input boolPoint41Active,    "Activate Point 41",    checkbox, 0;
input point41BezierIn,      "Bezier Control In",    point, 0, 0;
input point41,              "Point 41",             point, 0, 0;
input point41BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint41Smooth,    "Smooth",               checkbox, 0;

input labelPoint42,         "",                     label, "";
input boolPoint42Active,    "Activate Point 42",    checkbox, 0;
input point42BezierIn,      "Bezier Control In",    point, 0, 0;
input point42,              "Point 42",             point, 0, 0;
input point42BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint42Smooth,    "Smooth",               checkbox, 0;

input labelPoint43,         "",                     label, "";
input boolPoint43Active,    "Activate Point 43",    checkbox, 0;
input point43BezierIn,      "Bezier Control In",    point, 0, 0;
input point43,              "Point 43",             point, 0, 0;
input point43BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint43Smooth,    "Smooth",               checkbox, 0;

input labelPoint44,         "",                     label, "";
input boolPoint44Active,    "Activate Point 44",    checkbox, 0;
input point44BezierIn,      "Bezier Control In",    point, 0, 0;
input point44,              "Point 44",             point, 0, 0;
input point44BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint44Smooth,    "Smooth",               checkbox, 0;

input labelPoint45,         "",                     label, "";
input boolPoint45Active,    "Activate Point 45",    checkbox, 0;
input point45BezierIn,      "Bezier Control In",    point, 0, 0;
input point45,              "Point 45",             point, 0, 0;
input point45BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint45Smooth,    "Smooth",               checkbox, 0;

// ---------------------------- Points 46 - 50 ------------------------------ //

input labelPoint46,         "",                     label, "";
input boolPoint46Active,    "Activate Point 46",    checkbox, 0;
input point46BezierIn,      "Bezier Control In",    point, 0, 0;
input point46,              "Point 46",             point, 0, 0;
input point46BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint46Smooth,    "Smooth",               checkbox, 0;

input labelPoint47,         "",                     label, "";
input boolPoint47Active,    "Activate Point 47",    checkbox, 0;
input point47BezierIn,      "Bezier Control In",    point, 0, 0;
input point47,              "Point 47",             point, 0, 0;
input point47BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint47Smooth,    "Smooth",               checkbox, 0;

input labelPoint48,         "",                     label, "";
input boolPoint48Active,    "Activate Point 48",    checkbox, 0;
input point48BezierIn,      "Bezier Control In",    point, 0, 0;
input point48,              "Point 48",             point, 0, 0;
input point48BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint48Smooth,    "Smooth",               checkbox, 0;

input labelPoint49,         "",                     label, "";
input boolPoint49Active,    "Activate Point 49",    checkbox, 0;
input point49BezierIn,      "Bezier Control In",    point, 0, 0;
input point49,              "Point 49",             point, 0, 0;
input point49BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint49Smooth,    "Smooth",               checkbox, 0;

input labelPoint50,         "",                     label, "";
input boolPoint50Active,    "Activate Point 50",    checkbox, 0;
input point50BezierIn,      "Bezier Control In",    point, 0, 0;
input point50,              "Point 50",             point, 0, 0;
input point50BezierOut,     "Bezier Control Out",   point, 0, 0;
input boolPoint50Smooth,    "Smooth",               checkbox, 0;
code

// ########################################################################## //
// ############################## Preparation ############################### //
// ########################################################################## //

// Var to hold the number of hard coded inputs to avoid errors in loops 
// when more points are added.
float floatNumInputs;
floatNumInputs = 50;

// Counter variable
float floatCounter, floatCounter2;

// Points 1 & 2 are always active
float boolPoint1Active, boolPoint2Active;
boolPoint1Active = 1;
boolPoint2Active = 1;

// Array to hold state of 'active point' checkboxes
float boolIsActive[floatNumInputs];

boolIsActive[0] = boolPoint1Active;
boolIsActive[1] = boolPoint2Active;
boolIsActive[2] = boolPoint3Active;
boolIsActive[3] = boolPoint4Active;
boolIsActive[4] = boolPoint5Active;
boolIsActive[5] = boolPoint6Active;
boolIsActive[6] = boolPoint7Active;
boolIsActive[7] = boolPoint8Active;
boolIsActive[8] = boolPoint9Active;
boolIsActive[9] = boolPoint10Active;
boolIsActive[10] = boolPoint11Active;
boolIsActive[11] = boolPoint12Active;
boolIsActive[12] = boolPoint13Active;
boolIsActive[13] = boolPoint14Active;
boolIsActive[14] = boolPoint15Active;
boolIsActive[15] = boolPoint16Active;
boolIsActive[16] = boolPoint17Active;
boolIsActive[17] = boolPoint18Active;
boolIsActive[18] = boolPoint19Active;
boolIsActive[19] = boolPoint20Active;
boolIsActive[20] = boolPoint21Active;
boolIsActive[21] = boolPoint22Active;
boolIsActive[22] = boolPoint23Active;
boolIsActive[23] = boolPoint24Active;
boolIsActive[24] = boolPoint25Active;
boolIsActive[25] = boolPoint26Active;
boolIsActive[26] = boolPoint27Active;
boolIsActive[27] = boolPoint28Active;
boolIsActive[28] = boolPoint29Active;
boolIsActive[29] = boolPoint30Active;
boolIsActive[30] = boolPoint31Active;
boolIsActive[31] = boolPoint32Active;
boolIsActive[32] = boolPoint33Active;
boolIsActive[33] = boolPoint34Active;
boolIsActive[34] = boolPoint35Active;
boolIsActive[35] = boolPoint36Active;
boolIsActive[36] = boolPoint37Active;
boolIsActive[37] = boolPoint38Active;
boolIsActive[38] = boolPoint39Active;
boolIsActive[39] = boolPoint40Active;
boolIsActive[40] = boolPoint41Active;
boolIsActive[41] = boolPoint42Active;
boolIsActive[42] = boolPoint43Active;
boolIsActive[43] = boolPoint44Active;
boolIsActive[44] = boolPoint45Active;
boolIsActive[45] = boolPoint46Active;
boolIsActive[46] = boolPoint47Active;
boolIsActive[47] = boolPoint48Active;
boolIsActive[48] = boolPoint49Active;
boolIsActive[49] = boolPoint50Active;

// Find out how many points are being used
float floatNumPoints;
floatNumPoints = 0;

floatCounter = 0;
Repeat While (floatCounter < floatNumInputs)
    If (boolIsActive[floatCounter])
        floatNumPoints += 1;
    End If;
    floatCounter += 1;
End Repeat;

// Array to organise points and Bezier handles
// pointCurvePoints[x][0] = pointx
// pointCurvePoints[x][1] = pointxBezierIn
// pointCurvePoints[x][2] = pointxBezierOut

point pointCurvePoints[floatNumPoints + 1][3];

// Array to hold state of 'smooth mode' checkboxes
float boolIsSmooth[floatNumPoints];

// Set the last value in the array = point 1 values
pointCurvePoints[floatNumPoints][0] = point1;
pointCurvePoints[floatNumPoints][1] = point1BezierIn;
pointCurvePoints[floatNumPoints][2] = point1BezierOut;

// ------------------------------ Points 1 - 5 ------------------------------ //

pointCurvePoints[0][0] = point1;
pointCurvePoints[0][1] = point1BezierIn;
pointCurvePoints[0][2] = point1BezierOut;
boolIsSmooth[0] = boolPoint1Smooth;

pointCurvePoints[1][0] = point2;
pointCurvePoints[1][1] = point2BezierIn;
pointCurvePoints[1][2] = point2BezierOut;
boolIsSmooth[1] = boolPoint2Smooth;

floatCounter = 2;
floatCounter2 = 2;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point3;
    pointCurvePoints[floatCounter2][1] = point3BezierIn;
    pointCurvePoints[floatCounter2][2] = point3BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint3Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point4;
    pointCurvePoints[floatCounter2][1] = point4BezierIn;
    pointCurvePoints[floatCounter2][2] = point4BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint4Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point5;
    pointCurvePoints[floatCounter2][1] = point5BezierIn;
    pointCurvePoints[floatCounter2][2] = point5BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint5Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// ------------------------------ Points 6 - 10 ----------------------------- //

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point6;
    pointCurvePoints[floatCounter2][1] = point6BezierIn;
    pointCurvePoints[floatCounter2][2] = point6BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint6Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point7;
    pointCurvePoints[floatCounter2][1] = point7BezierIn;
    pointCurvePoints[floatCounter2][2] = point7BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint7Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point8;
    pointCurvePoints[floatCounter2][1] = point8BezierIn;
    pointCurvePoints[floatCounter2][2] = point8BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint8Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point9;
    pointCurvePoints[floatCounter2][1] = point9BezierIn;
    pointCurvePoints[floatCounter2][2] = point9BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint9Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point10;
    pointCurvePoints[floatCounter2][1] = point10BezierIn;
    pointCurvePoints[floatCounter2][2] = point10BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint10Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// ------------------------------ Points 11 - 15 ---------------------------- //

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point11;
    pointCurvePoints[floatCounter2][1] = point11BezierIn;
    pointCurvePoints[floatCounter2][2] = point11BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint11Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point12;
    pointCurvePoints[floatCounter2][1] = point12BezierIn;
    pointCurvePoints[floatCounter2][2] = point12BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint12Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;
If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point13;
    pointCurvePoints[floatCounter2][1] = point13BezierIn;
    pointCurvePoints[floatCounter2][2] = point13BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint13Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point14;
    pointCurvePoints[floatCounter2][1] = point14BezierIn;
    pointCurvePoints[floatCounter2][2] = point14BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint14Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point15;
    pointCurvePoints[floatCounter2][1] = point15BezierIn;
    pointCurvePoints[floatCounter2][2] = point15BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint15Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// ------------------------------ Points 16 - 20 ---------------------------- //

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point16;
    pointCurvePoints[floatCounter2][1] = point16BezierIn;
    pointCurvePoints[floatCounter2][2] = point16BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint16Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point17;
    pointCurvePoints[floatCounter2][1] = point17BezierIn;
    pointCurvePoints[floatCounter2][2] = point17BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint17Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point18;
    pointCurvePoints[floatCounter2][1] = point18BezierIn;
    pointCurvePoints[floatCounter2][2] = point18BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint18Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point19;
    pointCurvePoints[floatCounter2][1] = point19BezierIn;
    pointCurvePoints[floatCounter2][2] = point19BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint19Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point20;
    pointCurvePoints[floatCounter2][1] = point20BezierIn;
    pointCurvePoints[floatCounter2][2] = point20BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint20Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// ------------------------------ Points 21 - 25 ---------------------------- //

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point21;
    pointCurvePoints[floatCounter2][1] = point21BezierIn;
    pointCurvePoints[floatCounter2][2] = point21BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint21Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point22;
    pointCurvePoints[floatCounter2][1] = point22BezierIn;
    pointCurvePoints[floatCounter2][2] = point22BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint22Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point23;
    pointCurvePoints[floatCounter2][1] = point23BezierIn;
    pointCurvePoints[floatCounter2][2] = point23BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint23Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point24;
    pointCurvePoints[floatCounter2][1] = point24BezierIn;
    pointCurvePoints[floatCounter2][2] = point24BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint24Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point25;
    pointCurvePoints[floatCounter2][1] = point25BezierIn;
    pointCurvePoints[floatCounter2][2] = point25BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint25Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// ------------------------------ Points 26 - 30 ---------------------------- //

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point26;
    pointCurvePoints[floatCounter2][1] = point26BezierIn;
    pointCurvePoints[floatCounter2][2] = point26BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint26Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point27;
    pointCurvePoints[floatCounter2][1] = point27BezierIn;
    pointCurvePoints[floatCounter2][2] = point27BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint27Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point28;
    pointCurvePoints[floatCounter2][1] = point28BezierIn;
    pointCurvePoints[floatCounter2][2] = point28BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint28Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point29;
    pointCurvePoints[floatCounter2][1] = point29BezierIn;
    pointCurvePoints[floatCounter2][2] = point29BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint29Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point30;
    pointCurvePoints[floatCounter2][1] = point30BezierIn;
    pointCurvePoints[floatCounter2][2] = point30BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint30Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// ------------------------------ Points 31 - 35 ---------------------------- //

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point31;
    pointCurvePoints[floatCounter2][1] = point31BezierIn;
    pointCurvePoints[floatCounter2][2] = point31BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint31Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point32;
    pointCurvePoints[floatCounter2][1] = point32BezierIn;
    pointCurvePoints[floatCounter2][2] = point32BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint32Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point33;
    pointCurvePoints[floatCounter2][1] = point33BezierIn;
    pointCurvePoints[floatCounter2][2] = point33BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint33Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point34;
    pointCurvePoints[floatCounter2][1] = point34BezierIn;
    pointCurvePoints[floatCounter2][2] = point34BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint34Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point35;
    pointCurvePoints[floatCounter2][1] = point35BezierIn;
    pointCurvePoints[floatCounter2][2] = point35BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint35Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// ------------------------------ Points 36 - 40 ---------------------------- //

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point36;
    pointCurvePoints[floatCounter2][1] = point36BezierIn;
    pointCurvePoints[floatCounter2][2] = point36BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint36Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point37;
    pointCurvePoints[floatCounter2][1] = point37BezierIn;
    pointCurvePoints[floatCounter2][2] = point37BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint37Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point38;
    pointCurvePoints[floatCounter2][1] = point38BezierIn;
    pointCurvePoints[floatCounter2][2] = point38BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint38Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point39;
    pointCurvePoints[floatCounter2][1] = point39BezierIn;
    pointCurvePoints[floatCounter2][2] = point39BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint39Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point40;
    pointCurvePoints[floatCounter2][1] = point40BezierIn;
    pointCurvePoints[floatCounter2][2] = point40BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint40Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// ------------------------------ Points 41 - 45 ---------------------------- //

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point41;
    pointCurvePoints[floatCounter2][1] = point41BezierIn;
    pointCurvePoints[floatCounter2][2] = point41BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint41Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point42;
    pointCurvePoints[floatCounter2][1] = point42BezierIn;
    pointCurvePoints[floatCounter2][2] = point42BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint42Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point43;
    pointCurvePoints[floatCounter2][1] = point43BezierIn;
    pointCurvePoints[floatCounter2][2] = point43BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint43Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point44;
    pointCurvePoints[floatCounter2][1] = point44BezierIn;
    pointCurvePoints[floatCounter2][2] = point44BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint44Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point45;
    pointCurvePoints[floatCounter2][1] = point45BezierIn;
    pointCurvePoints[floatCounter2][2] = point45BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint45Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// ------------------------------ Points 46 - 50 ---------------------------- //

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point46;
    pointCurvePoints[floatCounter2][1] = point46BezierIn;
    pointCurvePoints[floatCounter2][2] = point46BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint46Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point47;
    pointCurvePoints[floatCounter2][1] = point47BezierIn;
    pointCurvePoints[floatCounter2][2] = point47BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint47Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point48;
    pointCurvePoints[floatCounter2][1] = point48BezierIn;
    pointCurvePoints[floatCounter2][2] = point48BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint48Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point49;
    pointCurvePoints[floatCounter2][1] = point49BezierIn;
    pointCurvePoints[floatCounter2][2] = point49BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint49Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

If (boolIsActive[floatCounter])
    pointCurvePoints[floatCounter2][0] = point50;
    pointCurvePoints[floatCounter2][1] = point50BezierIn;
    pointCurvePoints[floatCounter2][2] = point50BezierOut;
    boolIsSmooth[floatCounter2] = boolPoint50Smooth;
    floatCounter2 += 1;
End If;
floatCounter += 1;

// Adjust In Beziers for 'smooth' points
floatCounter = 0;
Repeat While (floatCounter < floatNumPoints)
    If (boolIsSmooth[floatCounter])
        pointCurvePoints[floatCounter][1] = {(pointCurvePoints[floatCounter][2].x * -1), (pointCurvePoints[floatCounter][2].y * -1)};
    End If;
    floatCounter += 1;
End Repeat;

If (boolIsSmooth[0])
    pointCurvePoints[floatNumPoints][1] = {(pointCurvePoints[floatNumPoints][2].x * -1), (pointCurvePoints[floatNumPoints][2].y * -1)};
End If;

// Adjust all the points to get correct positions
point	pointFrameSize;
DimensionsOf(dest, pointFrameSize.h, pointFrameSize.v);

pointCurvePoints *= pointFrameSize;

// Position control points relative to points
floatCounter = 0;
Repeat While (floatCounter <= floatNumPoints)
    pointCurvePoints[floatCounter][1] += pointCurvePoints[floatCounter][0];
    pointCurvePoints[floatCounter][2] += pointCurvePoints[floatCounter][0];
    floatCounter += 1;
End Repeat;

// Find out which points are used (for point labels)
float floatUsedPoints[floatNumPoints];

floatCounter = 0;
floatCounter2 = 0;
Repeat While (floatCounter < floatNumPoints)
    Repeat While (floatCounter2 < floatNumInputs)
        If (boolIsActive[floatCounter2])
            floatUsedPoints[floatCounter] = floatCounter2;
            floatCounter2 += 1;
            Exit Repeat;
        End If;
        floatCounter2 += 1;
    End Repeat
    floatCounter += 1;
End Repeat;


// ##################################### //
// ######## Create Bezier Shape ######## //
// ##################################### //

// Create the array that will hold the shape
point polyBezierShape[floatNumPoints * floatCurveRes];

// Subroutine to calculate the intermediate points along the curve
On subCalculatePoints(value _floatStartAt, point _pointStart, point _pointEnd, point _pointStartBezierOut, point _pointEndBezierIn)
    point _pointA, _pointB, _pointC;
    float _floatT;
    
    _pointC = {(3 * (_pointStartBezierOut.x - _pointStart.x)), (3 * (_pointStartBezierOut.y - _pointStart.y))};
    _pointB = {(3 * (_pointEndBezierIn.x - _pointStartBezierOut.x) - _pointC.x), (3 * (_pointEndBezierIn.y - _pointStartBezierOut.y) - _pointC.y)};
    _pointA = {(_pointEnd.x - _pointStart.x - _pointC.x - _pointB.x), (_pointEnd.y - _pointStart.y - _pointC.y - _pointB.y)};
    
    float _floatCounter;
    _floatCounter = 0;
    Repeat While (_floatCounter < floatCurveRes);
        _floatT = (1 / floatCurveRes) * (_floatCounter);
        
        polyBezierShape[_floatStartAt + _floatCounter].x = (_pointA.x * Power(_floatT, 3)) + (_pointB.x * Power(_floatT, 2)) + (_pointC.x * _floatT) + _pointStart.x;
        polyBezierShape[_floatStartAt + _floatCounter].y = (_pointA.y * Power(_floatT, 3)) + (_pointB.y * Power(_floatT, 2)) + (_pointC.y * _floatT) + _pointStart.y;
        
        _floatCounter += 1;
    End Repeat;
End;

floatCounter = 0;
Repeat While (floatCounter < floatNumPoints)
    subCalculatePoints((floatCounter * floatCurveRes), pointCurvePoints[floatCounter][0], pointCurvePoints[floatCounter + 1][0], pointCurvePoints[floatCounter][2], pointCurvePoints[floatCounter + 1][1]);
    floatCounter += 1;
End Repeat;

// ########################################### //
// ######## Prepare New Alpha Channel ######## //
// ########################################### //
float floatAspect;
floatAspect = AspectOf(dest);

image imageNewShape[pointFrameSize.h][pointFrameSize.v], imageExistingAlpha[pointFrameSize.h][pointFrameSize.v];

// imageNewShape: contains the bezier shape in the RGB channels, black shape on white.
ChannelFill(imageNewShape, 255, 255, 255, 255);
FillPoly(polyBezierShape, imageNewShape, kBlack);

If (boolInvertAlpha)
    InvertChannel(imageNewShape, imageNewShape, 0, 1, 1, 1);
End If;

// imageExistingAlpha: contains the existing alpha channel of src1 the RGB channels.
ChannelFill(imageExistingAlpha, 255, 0, 0, 0);
ChannelCopy(src1, imageExistingAlpha, kNone, kAlpha, kAlpha, kAlpha);

// Combine the 2 alphas into imageNewShape to create the "Add To Existing" mode.
If (floatMatteMode == 2)
    Multiply(imageNewShape, imageExistingAlpha, imageNewShape, 1, kAlpha);
End If;

// ################################ //
// ######## Draw The Shape ######## //
// ################################ //

ExposedBackground = 1;

// Subroutine to draw the point labels
On subDrawLabel(string _stringLabel, point _pointLabel, point _pointTarget)
    SetTextJustify(kCenterJustify);
    SetTextSize(10);
    SetTextStyle(kBold);
    
    float _floatTextWidth, _floatTextHeight, _floatTextAscent, _floatTextDescent;
    MeasureStringPlain(_stringLabel, _floatTextWidth, _floatTextHeight, _floatTextAscent, _floatTextDescent, floatAspect);
    
    point _polyTextBox[4];
    MakeRect(_polyTextBox, (_pointLabel.x - (_floatTextWidth / 2)), (_pointLabel.y - (_floatTextAscent / 2)), _floatTextWidth, _floatTextAscent);
    
    point _polyTextBG[4];
    _polyTextBG = _polyTextBox;
    
    If (Length(_stringLabel) == 1)
        Scale(_polyTextBG, _pointLabel, 2, 1.5);
    Else
        Scale(_polyTextBG, _pointLabel, 1.5, 1.5);
    End If;
    
    Line(_pointTarget, _pointLabel, dest, kGray, 1);
    FillPoly(_polyTextBG, dest, colorLabels);
    FramePoly(_polyTextBG, dest, kGray, 1);
    DrawStringPlain(_stringLabel, _polyTextBox, dest, kBlack, floatAspect);
End

If (previewing) // These only affect the canvas in preview mode
    If (boolShowMask)
        ChannelCopy(imageNewShape, dest, kRed, kNone, kNone, kNone);
        ChannelCopy(src1, dest, kNone, kRed, kGreen, kBlue);
    Else
        dest = src1;
    End If;
    
    If (boolShowLabels)
        point   pointLabelLocation;
        string  stringLabelString;
        floatCounter = 0;
        Repeat While(floatCounter < floatNumPoints)
            If (Sign(pointCurvePoints[floatCounter][0].x) > 0)
                pointLabelLocation.x = pointCurvePoints[floatCounter][0].x + 10;
            Else
                pointLabelLocation.x = pointCurvePoints[floatCounter][0].x - 10;
            End If;
            If (Sign(pointCurvePoints[floatCounter][0].y) > 0)
                pointLabelLocation.y = pointCurvePoints[floatCounter][0].y + 10
            Else
                pointLabelLocation.y = pointCurvePoints[floatCounter][0].y - 10
            End If;           
            NumToString((floatUsedPoints[floatCounter] + 1), stringLabelString, kPlain);
            subDrawLabel(stringLabelString, pointLabelLocation, pointCurvePoints[floatCounter][0]);
            floatCounter += 1;
        End Repeat;
    End If;
    
    if (boolShowOutline)
        FramePoly(polyBezierShape, dest, kwhite, 1);
    End If;
    
    If (boolShowHandles)
        floatCounter = 0;
        Repeat While (floatCounter < floatNumPoints)
            Line(pointCurvePoints[floatCounter][0], pointCurvePoints[floatCounter][1], dest, kwhite, 1);
            Line(pointCurvePoints[floatCounter][0], pointCurvePoints[floatCounter][2], dest, kwhite, 1);
            DrawSoftDot(dest, pointCurvePoints[floatCounter][1], kdiamond, 5, 0, 0, kred, 1, floatAspect);
            DrawSoftDot(dest, pointCurvePoints[floatCounter][2], kdiamond, 5, 0, 0, kblue, 1, floatAspect);
            floatCounter += 1;
        End Repeat;
    End If;
    
    If (boolShowPoints)
        floatCounter = 0;
        Repeat While (floatCounter < floatNumPoints)
            DrawSoftDot(dest, pointCurvePoints[floatCounter][0], kround, 7, 1, 0, kwhite, 1, floatAspect);
            floatCounter += 1;
        End Repeat;
    End If;
    
    If (boolShowTarget)
        float floatTargetSize;
        floatTargetSize = 10;
        
        point pointTargetTop, pointTargetBottom, pointTargetLeft, pointTargetRight;
        pointTargetTop = {0, (floatTargetSize * -1)};
        pointTargetBottom = {0, floatTargetSize};
        pointTargetLeft = {(floatTargetSize * -1), 0};
        pointTargetRight = {floatTargetSize, 0};
        Line(pointTargetTop, pointTargetBottom, dest, kYellow, 2);
        Line(pointTargetLeft, pointTargetRight, dest, kYellow, 2);
    End If;
End If;

If (!previewing)
    ChannelCopy(imageNewShape, dest, kRed, kNone, kNone, kNone);
    ChannelCopy(src1, dest, kNone, kRed, kGreen, kBlue);
End If;